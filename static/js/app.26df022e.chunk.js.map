{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","AsyncStorage","setItem","JSON","stringify","s","getItem","parse","addToDo","newToDos","Date","now","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","keyboardType","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","FontAwesome","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.26df022e.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"grey\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  Pressable,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./color\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState();\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => {\n    setText(payload);\n  };\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // save to do\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"Done\"\n        value={text}\n        returnKeyType=\"send\"\n        keyboardType=\"none\"\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text>\n                  <FontAwesome name=\"trash\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}